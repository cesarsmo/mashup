{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\cesar.moori\\\\Documents\\\\GitHub\\\\mashup\\\\src\\\\components\\\\NativeObject.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nimport '../css/nativeObject.css';\nimport Loader from '../components/Loader'; // função que busca objetos nativos\n// className: se tiver um css que altera o objeto do qlik\n// style: define um estilo ao objeto\n\nfunction NativeObject({\n  app,\n  qlikId,\n  className,\n  style\n}) {\n  _s();\n\n  // const [isLoading, setIsLoading] = useState(true)\n  // variável constante que sempre será useRef():\n  const ref = useRef();\n  useEffect(() => {\n    //checagem se o app existe. Se sim entra na API, busca o qlikId, a resposta 'vis' será apresentada na ref\n    if (app) {\n      app.visualization.get(qlikId).then(vis => {\n        vis.show(ref.current);\n      });\n    }\n  }, [app, qlikId]); // necessário passar tamanho da div, senão por padrão é zero e não aparece\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: className,\n    style: style || {\n      width: '100%',\n      height: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NativeObject, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = NativeObject;\nexport default NativeObject;\n\nvar _c;\n\n$RefreshReg$(_c, \"NativeObject\");","map":{"version":3,"sources":["C:/Users/cesar.moori/Documents/GitHub/mashup/src/components/NativeObject.js"],"names":["useEffect","useRef","Loader","NativeObject","app","qlikId","className","style","ref","visualization","get","then","vis","show","current","width","height"],"mappings":";;;;;AACA,SAAQA,SAAR,EAAmBC,MAAnB,QAAgC,OAAhC;AAEA,OAAO,yBAAP;AAEA,OAAOC,MAAP,MAAmB,sBAAnB,C,CAEA;AAEA;AACA;;AACA,SAASC,YAAT,CAAuB;AAACC,EAAAA,GAAD;AAAMC,EAAAA,MAAN;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA;AAAzB,CAAvB,EAAwD;AAAA;;AACpD;AAEA;AACA,QAAMC,GAAG,GAAGP,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAII,GAAJ,EAAS;AACLA,MAAAA,GAAG,CAACK,aAAJ,CAAkBC,GAAlB,CAAsBL,MAAtB,EAA8BM,IAA9B,CAAoCC,GAAD,IAAS;AACxCA,QAAAA,GAAG,CAACC,IAAJ,CAASL,GAAG,CAACM,OAAb;AACH,OAFD;AAGH;AACJ,GAPQ,EAOP,CAACV,GAAD,EAAMC,MAAN,CAPO,CAAT,CANoD,CAepD;;AACA,sBACI;AAAK,IAAA,GAAG,EAAEG,GAAV;AAAe,IAAA,SAAS,EAAEF,SAA1B;AAAqC,IAAA,KAAK,EAAEC,KAAK,IAAI;AAACQ,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAE;AAAxB,KAArD;AAAA,2BACA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GArBQb,Y;;KAAAA,Y;AAuBT,eAAeA,YAAf","sourcesContent":["\r\nimport {useEffect, useRef} from 'react';\r\n\r\nimport '../css/nativeObject.css';\r\n\r\nimport Loader from '../components/Loader';\r\n\r\n// função que busca objetos nativos\r\n\r\n// className: se tiver um css que altera o objeto do qlik\r\n// style: define um estilo ao objeto\r\nfunction NativeObject ({app, qlikId, className, style}) {\r\n    // const [isLoading, setIsLoading] = useState(true)\r\n\r\n    // variável constante que sempre será useRef():\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        //checagem se o app existe. Se sim entra na API, busca o qlikId, a resposta 'vis' será apresentada na ref\r\n        if (app) {\r\n            app.visualization.get(qlikId).then((vis) => {\r\n                vis.show(ref.current)\r\n            })\r\n        }\r\n    },[app, qlikId])\r\n\r\n    // necessário passar tamanho da div, senão por padrão é zero e não aparece\r\n    return (\r\n        <div ref={ref} className={className} style={style || {width: '100%', height: '100%'}}>\r\n        <Loader></Loader>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NativeObject;"]},"metadata":{},"sourceType":"module"}