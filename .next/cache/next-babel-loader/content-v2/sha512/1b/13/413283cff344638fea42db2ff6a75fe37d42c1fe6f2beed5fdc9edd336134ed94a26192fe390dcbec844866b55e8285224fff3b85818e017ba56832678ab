{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\cesar.moori\\\\Documents\\\\GitHub\\\\mashup\\\\src\\\\components\\\\CurrentSelections.js\",\n    _s = $RefreshSig$();\n\n// funções do React\n// useState: receber a lista\n// useEffect: \n// useCallback: recebe as seleções\n// useRef: salvar ID da lista para depois destruir objeto\nimport { useState, useEffect, useCallback, useRef } from 'react'; // Outros\n\nimport '../css/currentSelections.css';\n\nfunction CurrentSelections({\n  app\n}) {\n  _s();\n\n  // declaração de um array vazio para as seleções\n  const {\n    0: selections,\n    1: setSelections\n  } = useState([]); // variável para armazenar o Id para destruição\n\n  const objId = useRef(null); // para pegar a lista de seleção do Qlik\n  // assíncrona: retorno não é instantâneo, o código chama e continua a executar. \n\n  const loadCurrentSelections = useCallback(async () => {\n    if (app) {\n      // esperar receber a lista do app do qlik e a resposta é res\n      await app.getList('CurrentSelections', res => {\n        // console.log(res)\n        // Array dentro do Array\n        setSelections([...res.qSelectionObject.qSelections]);\n        objId.current = res.qInfo.qId;\n      });\n    }\n  }, [app]); // primeiro o useEffect vê se houve mudanças no app\n\n  useEffect(() => {\n    if (app) {\n      loadCurrentSelections();\n    }\n\n    return () => {\n      if (app) {\n        app.destroySessionObject(objId.current);\n      }\n    };\n  }, [app]);\n  return (\n    /*#__PURE__*/\n    // caixa das seleções do usuário\n    _jsxDEV(\"div\", {\n      className: \"currentSelections\",\n      children: selections.length > 0 ? // semelhante à for each, map retorna no mesmo local da chamada\n      selections.map(item =>\n      /*#__PURE__*/\n      // se sim:\n      _jsxDEV(\"div\", {\n        className: \"selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"selectionTitle\",\n          children: item.qField == '=Dual(Year([Date]),YearStart([Date]))' ? 'Ano' : item.qField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selected\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [item.qSelected, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => app.field(item.qField).clear(),\n              className: \"menuButton\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-times\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)) :\n      /*#__PURE__*/\n      //senão:                \n      _jsxDEV(\"span\", {\n        className: \"noSelection\",\n        children: \"Nenhuma Sele\\xE7\\xE3o Atual\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(CurrentSelections, \"gV7el15QsPe13Q58rp5zcFPWCg0=\");\n\n_c = CurrentSelections;\nexport default CurrentSelections;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentSelections\");","map":{"version":3,"sources":["C:/Users/cesar.moori/Documents/GitHub/mashup/src/components/CurrentSelections.js"],"names":["useState","useEffect","useCallback","useRef","CurrentSelections","app","selections","setSelections","objId","loadCurrentSelections","getList","res","qSelectionObject","qSelections","current","qInfo","qId","destroySessionObject","length","map","item","qField","qSelected","field","clear"],"mappings":";;;;;AAAA;AAEA;AACA;AACA;AACA;AACA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,WAA7B,EAA0CC,MAA1C,QAAuD,OAAvD,C,CAEA;;AACA,OAAO,8BAAP;;AAEA,SAASC,iBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAAmC;AAAA;;AAE/B;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BP,QAAQ,CAAC,EAAD,CAA5C,CAH+B,CAI/B;;AACA,QAAMQ,KAAK,GAAGL,MAAM,CAAC,IAAD,CAApB,CAL+B,CAO/B;AACA;;AACA,QAAMM,qBAAqB,GAAGP,WAAW,CAAC,YAAW;AACjD,QAAIG,GAAJ,EAAS;AACL;AACA,YAAMA,GAAG,CAACK,OAAJ,CAAY,mBAAZ,EAAkCC,GAAD,IAAS;AAC5C;AACA;AACAJ,QAAAA,aAAa,CAAC,CAAC,GAAGI,GAAG,CAACC,gBAAJ,CAAqBC,WAAzB,CAAD,CAAb;AACAL,QAAAA,KAAK,CAACM,OAAN,GAAgBH,GAAG,CAACI,KAAJ,CAAUC,GAA1B;AAEH,OANK,CAAN;AAOH;AAEJ,GAZwC,EAYvC,CAACX,GAAD,CAZuC,CAAzC,CAT+B,CAuB/B;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGI,GAAH,EAAQ;AACJI,MAAAA,qBAAqB;AACxB;;AAED,WAAO,MAAM;AACT,UAAGJ,GAAH,EAAQ;AACJA,QAAAA,GAAG,CAACY,oBAAJ,CAAyBT,KAAK,CAACM,OAA/B;AACH;AACJ,KAJD;AAMH,GAXQ,EAWP,CAACT,GAAD,CAXO,CAAT;AAaA;AAAA;AACI;AACA;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,gBAGKC,UAAU,CAACY,MAAX,GAAoB,CAApB,GACD;AACAZ,MAAAA,UAAU,CAACa,GAAX,CAAgBC,IAAD;AAAA;AACX;AACA;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCAGI;AAAM,UAAA,SAAS,EAAC,gBAAhB;AAAA,oBAEKA,IAAI,CAACC,MAAL,IAAe,uCAAf,GAAyD,KAAzD,GAAiED,IAAI,CAACC;AAF3E;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAWI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,iCACI;AAAA,uBACKD,IAAI,CAACE,SADV,eAGI;AAAQ,cAAA,OAAO,EAAE,MAAMjB,GAAG,CAACkB,KAAJ,CAAUH,IAAI,CAACC,MAAf,EAAuBG,KAAvB,EAAvB;AAAuD,cAAA,SAAS,EAAC,YAAjE;AAAA,qCACI;AAAG,gBAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CAFC;AAAA;AA2BC;AACF;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/BJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAqCH;;GA1EQpB,iB;;KAAAA,iB;AA4ET,eAAeA,iBAAf","sourcesContent":["// funções do React\r\n\r\n// useState: receber a lista\r\n// useEffect: \r\n// useCallback: recebe as seleções\r\n// useRef: salvar ID da lista para depois destruir objeto\r\nimport {useState, useEffect, useCallback, useRef} from 'react';\r\n\r\n// Outros\r\nimport '../css/currentSelections.css'\r\n\r\nfunction CurrentSelections ({app}) {\r\n\r\n    // declaração de um array vazio para as seleções\r\n    const [selections, setSelections] = useState([]);\r\n    // variável para armazenar o Id para destruição\r\n    const objId = useRef(null);\r\n\r\n    // para pegar a lista de seleção do Qlik\r\n    // assíncrona: retorno não é instantâneo, o código chama e continua a executar. \r\n    const loadCurrentSelections = useCallback(async() => {\r\n        if (app) {\r\n            // esperar receber a lista do app do qlik e a resposta é res\r\n            await app.getList('CurrentSelections', (res) => {\r\n                // console.log(res)\r\n                // Array dentro do Array\r\n                setSelections([...res.qSelectionObject.qSelections])\r\n                objId.current = res.qInfo.qId;\r\n\r\n            } )\r\n        }\r\n\r\n    },[app])\r\n\r\n    // primeiro o useEffect vê se houve mudanças no app\r\n    useEffect(() => {\r\n        if(app) {\r\n            loadCurrentSelections()\r\n        }    \r\n\r\n        return () => {\r\n            if(app) {\r\n                app.destroySessionObject(objId.current)\r\n            }\r\n        }\r\n\r\n    },[app]) \r\n\r\n    return (\r\n        // caixa das seleções do usuário\r\n        <div className='currentSelections'> \r\n\r\n            {/* checagem se existe seleções feitas */}\r\n            {selections.length > 0 ? \r\n            // semelhante à for each, map retorna no mesmo local da chamada\r\n            selections.map((item) => (\r\n                // se sim:\r\n                <div className='selection'>\r\n                    {/* título do campo selecionado */}\r\n                    {/* título é o item no local de qField */}\r\n                    <span className='selectionTitle'>\r\n                        {/* Ajuste de nome com expressão */}\r\n                        {item.qField == '=Dual(Year([Date]),YearStart([Date]))' ? 'Ano' : item.qField}\r\n                        {/* ou */}\r\n                        {/* {item.qReadableName} */}\r\n                    </span>\r\n\r\n                    {/* div com as seleções dos campos */}\r\n                    <div className='selected'>\r\n                        <span>\r\n                            {item.qSelected}\r\n                            {/* ao clicar chama a API field para o app */}\r\n                            <button onClick={() => app.field(item.qField).clear()} className='menuButton'>\r\n                                <i className='fas fa-times'></i>\r\n                            </button>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            ))\r\n\r\n            : //senão:                \r\n            <span className='noSelection'>Nenhuma Seleção Atual</span>\r\n            }\r\n        </div>\r\n    )    \r\n}\r\n\r\nexport default CurrentSelections;"]},"metadata":{},"sourceType":"module"}