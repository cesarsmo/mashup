{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\cesar.moori\\\\Documents\\\\GitHub\\\\mashup\\\\src\\\\components\\\\BarChart.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport Loader from '../components/Loader';\n\nfunction BarChart({\n  app,\n  id\n}) {\n  _s();\n\n  // Criação de estado useState. Armazena o option do echart para depois mandar para react e echarts\n  const {\n    0: option,\n    1: setOption\n  } = useState(); // Criação de referência useRef para armazenar o ID do novo Hypercube\n\n  const cubeId = useRef(null); //useEffect: definir conexão com Qlik e extração de dados\n\n  useEffect(() => {\n    // if: verificação da existência do app\n    if (app) {\n      // conecta com a visualization API e pega o model do objeto (id), chamado de VisualizationModel\n      app.visualization.get(id).then(visualizationModel => {\n        // usa função do model para buscar propriedades do objeto\n        visualizationModel.model.getProperties().then(res => {\n          const data = res; // busca na resposta o parâmetro title do objeto e salva na variável\n\n          const title = data.title; // hypercube já tem como segundo parâmetro um callback. Então\n          // não precisa do '.then'\n          // hypercubo é preciso para buscar os apenas os valores do objetos, sem estilo\n\n          app.createCube(data.qHyperCubeDef, hcData => {\n            // console.log(hcData);\n            // .current: atualiza o valor atual da variável cubeId para = ...\n            cubeId.current = hcData.qInfo.qId; // definição dos Arrays a serem preenchidos\n\n            let category = [];\n            let values = []; // usar o copy property path do Google Chrome\n            // for each: definição da ação para cada chamado 'item'\n\n            hcData.qHyperCube.qDataPages[0].qMatrix.forEach(item => {\n              // push: salva na Array um elemento\n              category.push(item[0].qText);\n              values.push(item[1].qText);\n            }); // console.log(\"categoria:\",category);\n            // console.log(\"valores:\",values);\n            // salvo em 'option' conforme modelo do echarts\n\n            let temp_Option = {\n              xAxis: {\n                type: 'value'\n              },\n              yAxis: {\n                type: 'category',\n                data: category\n              },\n              series: [{\n                data: values,\n                type: 'bar'\n              }],\n              title: {\n                show: true,\n                text: title\n              },\n              textStyle: {\n                fontfamily: 'Roboto'\n              }\n            }; // console.log(temp_Option);\n\n            setOption(temp_Option);\n          });\n        });\n      });\n    } // desconecta a conexão com o qlik para evitar perdas de performance\n\n\n    return () => {\n      if (cubeId.current) {\n        app.destroySessionObject(cubeId.current);\n      }\n    };\n  }, [app]);\n  return option ? /*#__PURE__*/_jsxDEV(ReactEcharts, {\n    option: option\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 21\n  }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 69\n  }, this);\n}\n\n_s(BarChart, \"TKH4QwhWiGe5bXCH/Ub5a2sYB/c=\");\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["C:/Users/cesar.moori/Documents/GitHub/mashup/src/components/BarChart.js"],"names":["useEffect","useRef","useState","ReactEcharts","Loader","BarChart","app","id","option","setOption","cubeId","visualization","get","then","visualizationModel","model","getProperties","res","data","title","createCube","qHyperCubeDef","hcData","current","qInfo","qId","category","values","qHyperCube","qDataPages","qMatrix","forEach","item","push","qText","temp_Option","xAxis","type","yAxis","series","show","text","textStyle","fontfamily","destroySessionObject"],"mappings":";;;;;AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA,GAAD;AAAMC,EAAAA;AAAN,CAAlB,EAA6B;AAAA;;AAEzB;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBP,QAAQ,EAApC,CAHyB,CAKzB;;AACA,QAAMQ,MAAM,GAAGT,MAAM,CAAC,IAAD,CAArB,CANyB,CAQzB;;AACAD,EAAAA,SAAS,CAAE,MAAM;AACb;AACA,QAAGM,GAAH,EAAQ;AACJ;AACAA,MAAAA,GAAG,CAACK,aAAJ,CAAkBC,GAAlB,CAAsBL,EAAtB,EAA0BM,IAA1B,CAAgCC,kBAAD,IAAwB;AACnD;AACAA,QAAAA,kBAAkB,CAACC,KAAnB,CAAyBC,aAAzB,GAAyCH,IAAzC,CAA+CI,GAAD,IAAS;AAEnD,gBAAMC,IAAI,GAAGD,GAAb,CAFmD,CAInD;;AACA,gBAAME,KAAK,GAAGD,IAAI,CAACC,KAAnB,CALmD,CAOnD;AACA;AACA;;AACAb,UAAAA,GAAG,CAACc,UAAJ,CAAeF,IAAI,CAACG,aAApB,EAAoCC,MAAD,IAAY;AAC3C;AACA;AACAZ,YAAAA,MAAM,CAACa,OAAP,GAAiBD,MAAM,CAACE,KAAP,CAAaC,GAA9B,CAH2C,CAK3C;;AACA,gBAAIC,QAAQ,GAAG,EAAf;AACA,gBAAIC,MAAM,GAAG,EAAb,CAP2C,CAS3C;AACA;;AACAL,YAAAA,MAAM,CAACM,UAAP,CAAkBC,UAAlB,CAA6B,CAA7B,EAAgCC,OAAhC,CAAwCC,OAAxC,CAAgDC,IAAI,IAAI;AACpD;AACAN,cAAAA,QAAQ,CAACO,IAAT,CAAcD,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAAtB;AACAP,cAAAA,MAAM,CAACM,IAAP,CAAYD,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAApB;AACH,aAJD,EAX2C,CAiB3C;AACA;AAEA;;AACA,gBAAIC,WAAW,GAAG;AACdC,cAAAA,KAAK,EAAE;AACHC,gBAAAA,IAAI,EAAE;AADH,eADO;AAIdC,cAAAA,KAAK,EAAE;AAEHD,gBAAAA,IAAI,EAAE,UAFH;AAGHnB,gBAAAA,IAAI,EAAEQ;AAHH,eAJO;AASda,cAAAA,MAAM,EAAE,CAAC;AACLrB,gBAAAA,IAAI,EAAES,MADD;AAELU,gBAAAA,IAAI,EAAE;AAFD,eAAD,CATM;AAadlB,cAAAA,KAAK,EAAE;AACHqB,gBAAAA,IAAI,EAAE,IADH;AAEHC,gBAAAA,IAAI,EAAEtB;AAFH,eAbO;AAiBduB,cAAAA,SAAS,EAAE;AACPC,gBAAAA,UAAU,EAAE;AADL;AAjBG,aAAlB,CArB2C,CA2C3C;;AACAlC,YAAAA,SAAS,CAAC0B,WAAD,CAAT;AACH,WA7CD;AA8CH,SAxDD;AAyDH,OA3DD;AA4DH,KAhEY,CAkEb;;;AACA,WAAO,MAAM;AACT,UAAIzB,MAAM,CAACa,OAAX,EAAoB;AAChBjB,QAAAA,GAAG,CAACsC,oBAAJ,CAAyBlC,MAAM,CAACa,OAAhC;AACH;AAEJ,KALD;AAOH,GA1EQ,EA0EP,CAACjB,GAAD,CA1EO,CAAT;AA6EA,SAAOE,MAAM,gBAAG,QAAC,YAAD;AAAc,IAAA,MAAM,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA,UAAH,gBAAmD,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UAAhE;AACH;;GAvFQH,Q;;KAAAA,Q;AAyFT,eAAeA,QAAf","sourcesContent":["import {useEffect, useRef, useState} from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nimport Loader from '../components/Loader';\r\n\r\nfunction BarChart({app, id}) {\r\n\r\n    // Criação de estado useState. Armazena o option do echart para depois mandar para react e echarts\r\n    const [option, setOption] = useState();\r\n\r\n    // Criação de referência useRef para armazenar o ID do novo Hypercube\r\n    const cubeId = useRef(null);\r\n\r\n    //useEffect: definir conexão com Qlik e extração de dados\r\n    useEffect (() => {\r\n        // if: verificação da existência do app\r\n        if(app) {\r\n            // conecta com a visualization API e pega o model do objeto (id), chamado de VisualizationModel\r\n            app.visualization.get(id).then((visualizationModel) => {\r\n                // usa função do model para buscar propriedades do objeto\r\n                visualizationModel.model.getProperties().then((res) => {\r\n\r\n                    const data = res;\r\n\r\n                    // busca na resposta o parâmetro title do objeto e salva na variável\r\n                    const title = data.title;\r\n\r\n                    // hypercube já tem como segundo parâmetro um callback. Então\r\n                    // não precisa do '.then'\r\n                    // hypercubo é preciso para buscar os apenas os valores do objetos, sem estilo\r\n                    app.createCube(data.qHyperCubeDef, (hcData) => {\r\n                        // console.log(hcData);\r\n                        // .current: atualiza o valor atual da variável cubeId para = ...\r\n                        cubeId.current = hcData.qInfo.qId;\r\n\r\n                        // definição dos Arrays a serem preenchidos\r\n                        let category = [];\r\n                        let values = [];\r\n\r\n                        // usar o copy property path do Google Chrome\r\n                        // for each: definição da ação para cada chamado 'item'\r\n                        hcData.qHyperCube.qDataPages[0].qMatrix.forEach(item => {\r\n                            // push: salva na Array um elemento\r\n                            category.push(item[0].qText);\r\n                            values.push(item[1].qText);\r\n                        })\r\n\r\n                        // console.log(\"categoria:\",category);\r\n                        // console.log(\"valores:\",values);\r\n\r\n                        // salvo em 'option' conforme modelo do echarts\r\n                        let temp_Option = {\r\n                            xAxis: {\r\n                                type: 'value'\r\n                            },\r\n                            yAxis: {\r\n\r\n                                type: 'category',\r\n                                data: category                                \r\n                            },\r\n                            series: [{\r\n                                data: values,\r\n                                type: 'bar'\r\n                            }],\r\n                            title: {\r\n                                show: true,\r\n                                text: title\r\n                            },\r\n                            textStyle: {\r\n                                fontfamily: 'Roboto'\r\n                            }\r\n                        };\r\n\r\n                        // console.log(temp_Option);\r\n                        setOption(temp_Option);\r\n                    })\r\n                })\r\n            })\r\n        }\r\n\r\n        // desconecta a conexão com o qlik para evitar perdas de performance\r\n        return () => {\r\n            if (cubeId.current) {\r\n                app.destroySessionObject(cubeId.current);\r\n            }\r\n\r\n        }\r\n\r\n    },[app])\r\n\r\n\r\n    return option ? <ReactEcharts option={option}></ReactEcharts> : <Loader></Loader>\r\n}\r\n\r\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}